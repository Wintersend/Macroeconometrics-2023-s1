---
title: "Econometrics Research Proposal"
author: "Michael Corwin Getty"
format: html
editor: visual
---

## Objective and Motivation

The goal of this research projectis to analyze the impact of unconditional government stipends on the U.S. economy, such as stimulus checks. To identify these effects I will analyze the effects of the stimulus checks and increased unemployment benefits issued by the US government in the wake of the COVID-19 pandemic.

This is an important topic as inequality rises direct government action may become increasingly necessary. Increased taxation on the rich and targeted government programs can only do so much to help those at the lower and middle ends of income. Especially as the groups in need of help become larger and their needs more diverse, the high administrative costs of judging who gets the benefits and what they are applicable to may become untenable. In this case, regular stimulus payments or higher unemployment benefits may become necessary to the continued economic health of the country. However, without knowing the effects of these methods, it is difficult to say whether or not they would do more harm than good.

## Data

For the purpose of this analysis data the United States Federal Reserve will be utilized. This source uses government data and is considered highly reliable. A potential issue is the information available being limited by the frequency with which the government collects data. To counter this, the estimates will use a long history and quarterly data which is the most frequent commonly available data.

The core factors chosen, median income, gdp per capita, and unemployment, were chosen for widely being considered to be strong indicators of economic health. An estimated four lags are used as this is quarterly data so by incorporating four lags seasonal effects are adequately accounted for. The time series all exhibit strong autocorrelation functions. However the partial autocorrelation functions are very weak, indicating that these are indeed all autoregressive parameters.

Unemployment Rate, Monthly: <https://fred.stlouisfed.org/series/UNRATE>

Median Usual Weekly Real Earnings: <https://fred.stlouisfed.org/series/LES1252881600Q>

Real GDP Per Capita, Quarterly: <https://fred.stlouisfed.org/series/A939RX0Q048SBEA>

Median income is chosen over average income as, due to income disparity in the united states, there are large distortions in the average compared to the median. As stimulus payments and increased unemployment benefits are likely to more significantly impact lower income individuals it was determined that the median income would prove more suitable

GDP per capita is selected as it accounts for fluctuations in population over time instead of including effects that could be simple shifts in total population

Unemployment is utilized at it is of paramount concern in either confirming or assuaging concerns that, with relatively less incentive to work, that a portion of the population will elect not to work.

```{r}


#load requisite packages
library(fredr)
library(zoo)
library(dplyr)
library(coda)

#set key for accessing FRED data
fredr_set_key("f1d6de070cd07cd6028872a3bc573657")

#Load in Fred data
#Real GFP Per Capita and Unemployment Rate and median earnings
rgdpcap = fredr(series_id = "A939RX0Q048SBEA")
urate = fredr(series_id = "UNRATE")
mearn = fredr(series_id = "LES1252881600Q")


1- rejectionRate(as.mcmc(theta[,1]))

#keep only unemployment rate and date to avoid errors
urate = subset(urate, select = c(date, value))

#Change unemployment data to quarterly
urate = urate %>%
  group_by(date = format(as.yearqtr(date, "%b-%Y"), "%YQ%q")) %>%
  summarise_all(mean)

#pull only needed values
rgdpcap = subset(rgdpcap, select = c(date, value))

#rename column names to be more easily interpreted
colnames(rgdpcap) = c("Date", "Real GDP Per Capita")

#Change date to quarters to keep consistent
rgdpcap$Date = as.yearqtr(rgdpcap$Date,
                      format = "%Y-%m-%d")


#rename column names to be more easily interpreted
colnames(urate) = c("Date", "Unemployment Rate %")

#pull only needed values
mearn = subset(mearn, select = c(date, value))

#rename column names to be more easily interpreted
colnames(mearn) = c("Date", "Weekly Earnings")

#Change date to quarters to keep consistent
mearn$Date = as.yearqtr(mearn$Date,
                          format = "%Y-%m-%d")

#problem
#RGDP and income are in different chained values
#solution, divide both by the relative CPI value to readjust to same real dollar
#average CPI in 2012 is 229.594
#average CPI in 2020 is 258.811
#average CPI in 1982-1984 dollars is 100

#formula to use, (CPI in new chain year * real value)/CPI in old chain year
#adjust both to 2020 dollars

rgdpcap$`Real GDP Per Capita` = (rgdpcap$`Real GDP Per Capita`*258.811)/229.594

mearn$`Weekly Earnings` = (mearn$`Weekly Earnings`*258.811)/100

#now that those values are about correct
#equalize length of data
#keep only values past the date of the newest data series
#keep only values before 2023 as mearn doesn't have 2023 data
urate = urate %>% filter(urate$Date >= '1979 Q1')
urate = urate %>% filter(urate$Date < '2023 Q1')

#adjust rgdpcap
rgdpcap = rgdpcap %>% filter(rgdpcap$Date >= '1979 Q1')

#values are all now equalized

#urate date neded up as not a date so fix that
urate$Date = as.yearqtr(urate$Date, format = "%YQ%q")

#load in CPI, as Inflation is a key target of the FED

CPI = fredr(series_id = "CPILFESL")

#select only needed data

CPI = subset(CPI, select = c(date, value))

#Adjust CPI to quarterly

CPI = CPI %>%
  group_by(date = format(as.yearqtr(date, "%b-%Y"), "%YQ%q")) %>%
  summarise_all(mean)

#rename column names to be more easily interpreted
colnames(CPI) = c("Date", "CPI")


CPI$Date = as.yearqtr(CPI$Date, format = "%YQ%q")



#should maybe include M2 money supply as a possible vector
#issue with M2 money suppl defiintion being changed
#large upswing in 2020 that is not due to real changes
#Also truncates data 2 years later
#large information loss given already small number of observations
#do not include at present 

#load in government consumption spending

govex = fredr(series_id = "A955RX1Q020SBEA")

#select only needed data

govex = subset(govex, select = c(date, value))

#Re-chain to 2020 dollars
govex$value = (govex$value*258.811)/229.594


#rename column names to be more easily interpreted
colnames(govex) = c("Date", "GovSpend in Billions")


govex$Date = as.yearqtr(govex$Date, format = "%YQ%q")




#load in real M2

M2 = fredr(series_id = "M2REAL")

#select only needed data

M2 = subset(M2, select = c(date, value))

#Re-chain to 2020 dollars
M2$value = (M2$value*258.811)/100

#adjust to be quarterly

M2 = M2 %>%
  group_by(date = format(as.yearqtr(date, "%b-%Y"), "%YQ%q")) %>%
  summarise_all(mean)

#rename column names to be more easily interpreted
colnames(M2) = c("Date", "M2 Money Supply")


M2$Date = as.yearqtr(M2$Date, format = "%YQ%q")



#visually demonstrate values
plot(urate$Date , urate$`Unemployment Rate %`, type = "l", 
     main = "US Unemployment Rate Over Time", xlab = "Year/Quarter", 
     ylab = "Unemployment %", col = "blue")

plot(mearn$Date , mearn$`Weekly Earnings`, type = "l", 
     main = "US Median Weekly Earnings (2020 Dollars", xlab = "Year/Quarter", 
     ylab = "Weekly Earnings in $", col = "blue")

plot(rgdpcap$Date , rgdpcap$`Real GDP Per Capita` , type = "l", 
     main = "US Real GDP Per Capita (2020 Dollars) ", xlab = "Year/Quarter", 
     ylab = "Real GDP in $", col = "blue")

plot(CPI$Date , CPI$CPI, type = "l", 
     main = "US CPI Over Time", xlab = "Year/Quarter", 
     ylab = "CPI", col = "blue")

plot(govex$Date , govex$`GovSpend in Billions`, type = "l", 
     main = "US Governement Consumption Over Time", xlab = "Year/Quarter", 
     ylab = "Billions of 2020 dollars", col = "blue")

plot(M2$Date , M2$`M2 Money Supply`, type = "l", 
     main = "US M2 Money Supply Over Time", xlab = "Year/Quarter", 
     ylab = "Billions of 2020 dollars", col = "blue")

#plot autocorrelation functions

acf(urate[,2])
acf(mearn[,2])
acf(rgdpcap[,2])
acf(CPI[,2])
acf(govex[,2])
acf(M2[,2])


#plot PACF
pacf(urate[,2])
pacf(mearn[,2])
pacf(rgdpcap[,2])
pacf(CPI[,2])
pacf(govex[,2])
pacf(M2[,2])

#ADF testing
tseries::adf.test(as.vector(urate$`Unemployment Rate %`), k = 4)
tseries::adf.test(as.vector(mearn$`Weekly Earnings`), k = 4)
tseries::adf.test(as.vector(rgdpcap$`Real GDP Per Capita`), k = 4)
tseries::adf.test(as.vector(CPI$CPI), k = 4)
tseries::adf.test(as.vector(govex$`GovSpend in Billions`), k = 4)
tseries::adf.test(as.vector(M2$`M2 Money Supply`), k = 4)

#For all reject unit root stationarity

tseries::adf.test(diff(as.vector(urate$`Unemployment Rate %`), k = 3))
tseries::adf.test(diff(as.vector(mearn$`Weekly Earnings`), k = 3))
tseries::adf.test(diff(as.vector(rgdpcap$`Real GDP Per Capita`), k = 3))
tseries::adf.test(diff(as.vector(CPI$CPI), k = 3))
tseries::adf.test(diff(as.vector(govex$`GovSpend in Billions`), k = 3))
tseries::adf.test(diff(as.vector(M2$`M2 Money Supply`), k = 3))
```

## Model and Hypothesis

# Rework This

The model utilized will be a trivariate SVAR with the following specification

*inc~t~* + α~1,2~gdp~t~ + α~1,3~uem~t~ = β~1,0~ + β~1,1~inc~t-1~ + β~1,2~gdp~t-1~ + β~1,3~uem~t-1~ + ... + β~1,10~inc~t-4~ + β~1,11~gdp~t-4~ + β~1,12~uem~t-4~ + μ~inct~

*α~2,1~inc~t~* + gdp~t~ + α~2,3~uem~t~ = β~2,0~ + β~2,1~inc~t-1~ + β~2,2~gdp~t-1~ + β~2,3~uem~t-1~ + ... + β~2,10~inc~t-4~ + β~2,11~gdp~t-4~ + β~2,12~uem~t-4~ + μ~gdpt~

*α~3,1~inc~t~* + α~3,2~gdp~t~ + uem~t~ = β~3,0~ + β~3,1~inc~t-1~ + β~3,2~gdp~t-1~ + β~3,3~uem~t-1~ + ... + β~3,10~inc~t-4~ + β~3,11~gdp~t-4~ + β~3,12~uem~t-4~ + μ~uemt~

Where inc is median income, gdp is GDP per capita, uem is unemployment

α terms are present to indicate present relationships between the variables

β~1,0~ β~2,0~ β~3,0~ are each intercept terms

all other β terms are a multiplier on the value of prior period values on the present

... indicates that the variables in question follow a repeating pattern, in this case lags from 1 to 4 periods

μ is an error term

t subscripts indicate the time period relative to the present. E.g. t-1 indicates the value of the variable one period in the past.

I would also like to in my final report include a control variable for COVID as COVID doubtless impacted the economy in a way unrelated to any other changes.

This model goes to four lags as the data is quarterly and this ensures that seasonality effects are removed. The model will serve to identify the effects of shocks on the US economy stemming from stimulus payments as stimulus payments may be treated as one period shocks to income and the impulse response function will tell us the effects that such payments have on the economy.

Estimating the effects of increased unemployment benefits is more difficult but can be achieved by treating these as a wage floor as presumably if one would be paid less than unemployment benefits one will choose not to work except as necessary to maintain benefits. Thus median income can be replaced with minimum wage in the above calculation and high levels of unemployment benefits treated as an effective increase in the minimum wage. As an alternative, the effects of a universal basic income program may be estimated as a permanent increase in income to all members of society regardless of their employment status.

These are all relevant to the economic situation in the United States going forward. A combination of stagnating wages, low minimum wage, and increasing income inequality threatens to force more forceful government action to avert economic crisis stemming from a lower-class which no longer lives at a subsistence level. While this state has not yet been reached it is a looming threat which must be addressed. The number of government programs to help low income individuals is immense but oftentimes much time and energy is spent ensuring that the "undeserving" are not given these benefits which can lead to those in need being rejected or ending up in worse circumstances due to long delays in receiving assistance. All of the proposed methods due to their weak targeting requirements would provide relief more rapidly and potentially aid in economic growth more than programs targeted at covering expenses related to a specific aspect of life.

Loading in additional data to incorporate into full model

```{r}

#load in CPI, as Inflation is a key target of the FED

CPI = fredr(series_id = "CPILFESL")

#select only needed data

CPI = subset(CPI, select = c(date, value))

#Adjust CPI to quarterly

CPI = CPI %>%
  group_by(date = format(as.yearqtr(date, "%b-%Y"), "%YQ%q")) %>%
  summarise_all(mean)

#rename column names to be more easily interpreted
colnames(CPI) = c("Date", "CPI")


CPI$Date = as.yearqtr(CPI$Date, format = "%YQ%q")

plot(CPI$Date , CPI$CPI, type = "l", 
     main = "US CPI Over Time", xlab = "Year/Quarter", 
     ylab = "CPI", col = "blue")


#should maybe include M2 money supply as a possible vector
#issue with M2 money suppl defiintion being changed
#large upswing in 2020 that is not due to real changes
#Also truncates data 2 years later
#large information loss given already small number of observations
#do not include at present 

#load in government consumption spending

govex = fredr(series_id = "A955RX1Q020SBEA")

#select only needed data

govex = subset(govex, select = c(date, value))

#Re-chain to 2020 dollars
govex$value = (govex$value*258.811)/229.594


#rename column names to be more easily interpreted
colnames(govex) = c("Date", "GovSpend in Billions")


govex$Date = as.yearqtr(govex$Date, format = "%YQ%q")

plot(govex$Date , govex$`GovSpend in Billions`, type = "l", 
     main = "US Governement Consumption Over Time", xlab = "Year/Quarter", 
     ylab = "Billions of 2020 dollars", col = "blue")



#load in real M2

M2 = fredr(series_id = "M2REAL")

#select only needed data

M2 = subset(M2, select = c(date, value))

#Re-chain to 2020 dollars
M2$value = (M2$value*258.811)/100

#adjust to be quarterly

M2 = M2 %>%
  group_by(date = format(as.yearqtr(date, "%b-%Y"), "%YQ%q")) %>%
  summarise_all(mean)

#rename column names to be more easily interpreted
colnames(M2) = c("Date", "M2 Money Supply")


M2$Date = as.yearqtr(M2$Date, format = "%YQ%q")

plot(M2$Date , M2$`M2 Money Supply`, type = "l", 
     main = "US M2 Money Supply Over Time", xlab = "Year/Quarter", 
     ylab = "Billions of 2020 dollars", col = "blue")

```

Below is a temporary implementation of the SVAR which will evolve over time as I build the model to be more detailed and robust.

y = cbind(urate\[,2\], mearn\[,2\])

y = cbind(y, rgdpcap\[,2\])

\# normal-inverse Wishard posterior parameters

\############################################################

V.bar.inv = t(X)%\*%X + diag(1/diag(V.prior))

V.bar = solve(V.bar.inv)

A.bar = V.bar%\*%(t(X)%\*%Y + diag(1/diag(V.prior))%\*%A.prior)

nu.bar = nrow(Y) + nu.prior

S.bar = S.prior + t(Y)%\*%Y + t(A.prior)%\*%diag(1/diag(V.prior))%\*%A.prior - t(A.bar)%\*%V.bar.inv%\*%A.bar

S.bar.inv = solve(S.bar)

```{r}

#Onlyusing mearn, rgdpcap, and urate in initial setup, will include other
#information when basic model is functional

#equalize length of data
#keep only values past the date of the newest data series
#keep only values before 2023
mearn = mearn %>% filter(mearn$Date >= '1979 Q1')
mearn = mearn %>% filter(mearn$Date < '2023 Q1')

rgdpcap = rgdpcap %>% filter(rgdpcap$Date >= '1979 Q1')
rgdpcap = rgdpcap %>% filter(rgdpcap$Date < '2023 Q1')

#CPI = CPI %>% filter(CPI$Date >= '1979 Q1')
#CPI = CPI %>% filter(CPI$Date < '2023 Q1')

#govex = govex %>% filter(govex$Date >= '1979 Q1')
#govex = govex %>% filter(govex$Date < '2023 Q1')

#M2 = M2 %>% filter(M2$Date >= '1979 Q1')
#M2 = M2 %>% filter(M2$Date < '2023 Q1')

#set up y matrix
#doing it like this so I can toggle stuff off and on
y = cbind(urate[,2], mearn[,2])
y = cbind(y, rgdpcap[,2])
#y = cbind(y, CPI[,2])
#y = cbind(y, govex[,2])
#y = cbind(y, M2[,2])

#RF
#Y = u + A1Y-1 + A2Y-2 ... + error

#If lags = 4, must start from 5th observation
#Need to set y as matrix or X becomes wrong object type for future calcs
y = as.matrix(y)


#create VAR model?
#VAR(4) for 1 year of lags

# setup
############################################################

#number of variables
N       = 3
#number of lags
p       = 4
#number of draws
S       = 50000
#not the foggiest
h       = 8

# create Y and X
############################################################  

Y       = ts(y[5:176,])
X       = matrix(1,nrow(Y),1)
for (i in 1:p){
  X     = cbind(X,y[5:176-i,])
}

t0          = proc.time() # read processor time



# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)

#kappa 1 is 1 if non-stationary
#smaller than 1 if stationary
kappa.1     = 1^2
#k2 = 100 is given for Minnesota Prior
kappa.2     = 100
#kappa 3 is 1 just given the fact that it determines A.prior
#which invovles the identity matrix
kappa.3     = 1
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
#bit in brackets is just 2:p+1
A.prior[2:4,] = kappa.3*diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1

# normal-inverse Wishard posterior parameters
############################################################

#This is all just given and can be reused infinitely
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

#Ok so all of that above should get me all the posterior distribution
#Now I need to actually do anything whatsoever with sign restrctions

# Estimating models with sign restrictions: example
# Use Algorithm 2
############################################################
rm(list=ls())
set.seed(123456)
#column by column
sign.restrictions = c(-1,-1,1,-1,-1,1)
#this is fine just regardless of how many there are
R1            = diag(sign.restrictions)
#Check how to derive
A             = t(matrix(c(.5,.5,0,-1.25,.25,0,-1,0,.5),3,3))
#check how to derive
Sigma         = matrix(c(1,.5,1,.5,4.25,2.5,1,2.5,3),3,3)
#these should be a given I *think*
B0.tilde      = t(solve(chol(Sigma)))
B1.tilde      = B0.tilde%*%A
IR.0.tilde    = solve(B0.tilde)
IR.1.tilde    = solve(B0.tilde)%*%B1.tilde%*%solve(B0.tilde)

#This just repeats until I get one where sign restrictions hold
#Assuming the above is all set up properly this shoudl require no more input
#some of this might require a touch of editing
#E,g, X may be based on some given parameters instead of being arbitrary
sign.restrictions.do.not.hold = TRUE
i=1
while (sign.restrictions.do.not.hold){
  X           = matrix(rnorm(9),3,3)
  QR          = qr(X, tol = 1e-10)
  Q           = qr.Q(QR,complete=TRUE)
  R           = qr.R(QR,complete=TRUE)
  Q           = t(Q %*% diag(sign(diag(R))))
  B0          = Q%*%B0.tilde
  B1          = Q%*%B1.tilde
  B0.inv      = solve(B0)
  check       = prod(R1 %*% rbind(B0.inv,B0.inv%*%B1%*%B0.inv) %*% diag(3)[,1] > 0)
  if (check==1){sign.restrictions.do.not.hold=FALSE}
  i=i+1
}
i
Q
B0
B1
IR.0        = B0.inv
IR.1        = B0.inv%*%B1%*%B0.inv
IR.0
IR.1
R1 %*% rbind(IR.0,IR.1) %*% diag(3)[,1]

```

Below is an attempt at a possible model extension.

Attempting to incorporate COVID as specified in *How to estimate a vector autoregression after March 2020* by Michele Lenza and Giorgio E. Primiceri

```{r}
#Attempt at microcosm programming for the sake of later inclusion
#in the overall model

#first need to identify st1, st2, st3
#cannot take as given
#need to calculate additional terms
#Beta is given by A.bar

#Does gamma come in anywhere under a different name?
#Lecture slides use S and ν for IW values as well as M, Σ, P
#Paper uses ψ and d for IW values as well as b, Σ, Ω

#Directions to derive St seem unclear
#Theta is (s1, s2, s3, rho)
#is it just p(gamma, theta|y)
#But how is p(y|gamma, theta) derived?
#IT seems to depend on already having st
#Does it mean the prior of st? 

#set new yt based on given st
#curent y lacks date
#rebind date to verify
#There must be a better way to select the appropriate dates
#I just don't know offhand

rho = rnorm(mean = 0, sd = 0.5)

s = rep(1,160)

#initialize s's
s0 = 1
s1 = 2
s2 = 3
#initialize empty rho vector
rhos = as.matrix(rep(0,9))
rhos[1,]
#for loop to find all variances
for (i in 1:9){
  #can chage j-2 to just i since i is j-2 already
  #itterates through each time period to calculate new value based on s2 and rho
  rhos[i,] = 1 + (s2-1) * rho ^ i
}

#extend this to include all future values determined by rho
s = c(s, s0, s1, s2, rhos)
sdia = diag(s)
#Check back later
#may not need to actually use these.
y = cbind(urate[,1], y)
yt1 = y[165,2:7]/s1
yt2 = y[166,2:7]/s2
yt3 = y[167,2:7]/s3

#reinsert these rows back into the original y matrix
#only separate for verification purposes here to ensure math was done correctly
#directly give correct output in final code


#should be able to construct a for loop of some kind
#try to do that later


#generate Xt


#set new Xt based on given st

#regenerate Beta and Sigma using MLE of new values
A.hat       = solve(t(X)%*%sdia%*%X)%*%t(X)%*%sdia%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)

#This is all just given and can be reused infinitely
V.bar.inv   = t(X)%*%diag(1/s)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%diag(1/s)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%diag(1/s)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)
```

```{r}
#I hope this code works

#equalize length of data
#keep only values past the date of the newest data series
#keep only values before 2023
mearn = mearn %>% filter(mearn$Date >= '1979 Q1')
mearn = mearn %>% filter(mearn$Date < '2023 Q1')

rgdpcap = rgdpcap %>% filter(rgdpcap$Date >= '1979 Q1')
rgdpcap = rgdpcap %>% filter(rgdpcap$Date < '2023 Q1')


#CPI doesn't work, but if I change name and change back it works
CPI2 = CPI

CPI2 = CPI2 %>% filter(CPI2$Date >= '1979 Q1')
CPI = CPI2 %>% filter(CPI2$Date < '2023 Q1')

govex = govex %>% filter(govex$Date >= '1979 Q1')
govex = govex %>% filter(govex$Date < '2023 Q1')

M2 = M2 %>% filter(M2$Date >= '1979 Q1')
M2 = M2 %>% filter(M2$Date < '2023 Q1')

#set up y matrix
#doing it like this so I can toggle stuff off and on
y = cbind(urate[,2], mearn[,2])
y = cbind(y, rgdpcap[,2])
y = cbind(y, CPI[,2])
y = cbind(y, govex[,2])
y = cbind(y, M2[,2])


#Need to set y as matrix or X becomes wrong object type for future calcs
y = as.matrix(y)

#To ensure consistency later in setting Sign Restrictions
#y has variables in the following order
#Unemployment Rate
#Mean Earnings
#Real GDP Per Capita
#Consumer Price Index
#Real Government Consumption Expenditure
#M2 Money Supply
#Change the above as needed to ensure all sign restrictions are on the left


#create VAR model?
#VAR(4) for 1 year of lags

# setup
############################################################

#number of variables
N       = 6
#number of lags
p       = 4
#number of draws
S       = 50000
#not the foggiest
h       = 8

# create Y and X
############################################################  

Y       = ts(y[5:176,])
X       = matrix(1,nrow(Y),1)
for (i in 1:p){
  X     = cbind(X,y[5:176-i,])
}

t0          = proc.time() # read processor time



# MLE
############################################################
A.hat       = solve(t(X)%*%X)%*%t(X)%*%Y
Sigma.hat   = t(Y-X%*%A.hat)%*%(Y-X%*%A.hat)/nrow(Y)

#kappa 1 is 1 if non-stationary
#smaller than 1 if stationary
kappa.1     = 1^2
#k2 = 100 is given for Minnesota Prior
kappa.2     = 100
#kappa 3 is 1 just given the fact that it determines A.prior
#which invovles the identity matrix
kappa.3     = 1
A.prior     = matrix(0,nrow(A.hat),ncol(A.hat))
#bit in brackets is just 2:N+1
A.prior[2:7,] = kappa.3*diag(N)
V.prior     = diag(c(kappa.2,kappa.1*((1:p)^(-2))%x%rep(1,N)))
S.prior     = diag(diag(Sigma.hat))
nu.prior    = N+1

# normal-inverse Wishard posterior parameters
############################################################

#This is all just given and can be reused infinitely
V.bar.inv   = t(X)%*%X + diag(1/diag(V.prior))
V.bar       = solve(V.bar.inv)
A.bar       = V.bar%*%(t(X)%*%Y + diag(1/diag(V.prior))%*%A.prior)
nu.bar      = nrow(Y) + nu.prior
S.bar       = S.prior + t(Y)%*%Y + t(A.prior)%*%diag(1/diag(V.prior))%*%A.prior - t(A.bar)%*%V.bar.inv%*%A.bar
S.bar.inv   = solve(S.bar)

#Ok so all of that above should get me all the posterior distribution
#Now I need to actually do anything whatsoever with sign restrctions

# Estimating models with sign restrictions: example
# Use Algorithm 2
############################################################
rm(list=ls())
set.seed(123456)
#column by column
sign.restrictions = c(-1,-1,1,-1,-1,1)
#this is fine just regardless of how many there are
R1            = diag(sign.restrictions)
#Check how to derive
#I think this is just the posterior
A = A.bar
#check how to derive
#pretty sure this is also just a posterior
Sigma         = S.bar
#these should be a given I *think*
#error with B0.tilde

B0.tilde      = t(solve(chol(Sigma)))
B1.tilde      = B0.tilde%*%A
IR.0.tilde    = solve(B0.tilde)
IR.1.tilde    = solve(B0.tilde)%*%B1.tilde%*%solve(B0.tilde)

#This just repeats until I get one where sign restrictions hold
#Assuming the above is all set up properly this shoudl require no more input
#some of this might require a touch of editing
#E,g, X may be based on some given parameters instead of being arbitrary
sign.restrictions.do.not.hold = TRUE
i=1
while (sign.restrictions.do.not.hold){
  X           = matrix(rnorm(9),3,3)
  QR          = qr(X, tol = 1e-10)
  Q           = qr.Q(QR,complete=TRUE)
  R           = qr.R(QR,complete=TRUE)
  Q           = t(Q %*% diag(sign(diag(R))))
  B0          = Q%*%B0.tilde
  B1          = Q%*%B1.tilde
  B0.inv      = solve(B0)
  check       = prod(R1 %*% rbind(B0.inv,B0.inv%*%B1%*%B0.inv) %*% diag(3)[,1] > 0)
  if (check==1){sign.restrictions.do.not.hold=FALSE}
  i=i+1
}
i
Q
B0
B1
IR.0        = B0.inv
IR.1        = B0.inv%*%B1%*%B0.inv
IR.0
IR.1
R1 %*% rbind(IR.0,IR.1) %*% diag(3)[,1]
```
